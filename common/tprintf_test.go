// DBDeployer - The MySQL Sandbox
// Copyright Â© 2006-2018 Giuseppe Maxia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package common

import (
	"fmt"
	"regexp"
	"testing"
)

func okMatchesString(label, val, regex string, t *testing.T) {
	re := regexp.MustCompile(regex)
	if re.MatchString(val) {
		t.Logf("ok - %s: %s matches '%s'\n", label, val, regex)
	} else {
		t.Logf("not ok - %s: String '%s'  doesn't match '%s'", label, val, regex)
		t.Fail()
	}
}

func TestTemplateFill(t *testing.T) {
	var template string = `[{{.AppVersion}}] {{.Article}} {{.Adjective}} {{.Noun}} {{.Verb}} {{.Object}}`
	type tprintfData struct {
		data     StringMap
		expected string
	}
	var dataCollection = []tprintfData{
		tprintfData{
			StringMap{
				"Article":   "The",
				"Adjective": "nice",
				"Noun":      "squirrel",
				"Verb":      "eats",
				"Object":    "nuts"},
			// The AppVersion field is generated by TemplateFill
			fmt.Sprintf("[%s] The nice squirrel eats nuts", VersionDef),
		},
		tprintfData{
			StringMap{
				"Article":   "An",
				"Adjective": "ugly and huge",
				"Noun":      "*orc*",
				"Verb":      "follows",
				"Object":    "the hobbits"},
			fmt.Sprintf("[%s] An ugly and huge *orc* follows the hobbits", VersionDef),
		},
	}
	for _, td := range dataCollection {
		result := TemplateFill(template, td.data)
		if result == td.expected {
			t.Logf("ok - string formatted as expected: '%s'\n", result)
		} else {
			t.Logf("not ok - Expected %s - found %s\n", td.expected, result)
			t.Fail()
		}
	}
	template = `{{.DateTime}}`
	// The DateTime field is auto generated
	data := StringMap{}
	result := TemplateFill(template, data)
	//             Sun Oct    7  07: 42: 24 CEST 2018
	reExpected := `\w+ \w+\s+\d+ \d+:\d+:\d+ \w+ \d+`
	okMatchesString("Timestamp", result, reExpected, t)
}
