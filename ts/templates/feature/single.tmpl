[!unix] skip 'this procedure can only work on Unix systems'
env HOME={{.Home}}
env TMPDIR={{.TmpDir}}
env db_version={{.DbVersion}}
env sb_dir=$HOME/sandboxes/msb_{{.DbPathVer}}

! exists $sb_dir

# deployment

exec dbdeployer deploy single $db_version
stdout 'Database installed in .*/sandboxes/msb_{{.DbPathVer}}'
stdout 'sandbox server started'
! stderr .
exists $sb_dir

cleanup_at_end $sb_dir

# check files and ports

check_exec $sb_dir start stop status clear
check_exec $sb_dir add_option init_db
check_exec $sb_dir show_relaylog after_start load_grants
check_exec $sb_dir replicate_from send_kill sysbench use
check_exec $sb_dir metadata restart show_binlog sysbench_ready wipe_and_restart
check_exec $sb_dir my show_log test_sb

check_file $sb_dir connection.json connection_super_user.json connection_super_user.conf my.sandbox.cnf
check_file $sb_dir sbdescription.json connection.sql
check_file $sb_dir connection.conf grants.mysql sb_include
check_file $sb_dir/data msandbox.err
[version_is_at_least:$db_version:8.0.17] check_file $sb_dir clone_connection.sql

env required_ports=1
[version_is_at_least:$db_version:8.0.0] env required_ports=2
check_ports $sb_dir $required_ports

exec $sb_dir/test_sb
stdout '# fail  :     0'
! stderr .

! find_errors $sb_dir

# test dbdeployer sandboxes

exec dbdeployer sandboxes
stdout 'msb_{{.DbPathVer}}.*single'
! stderr .

# Test restart sandbox
exec $sb_dir/restart --max-connections=88
stdout 'stop .*/msb_{{.DbPathVer}}'
stdout 'sandbox server started'
! stderr .

run_sql_in_sandbox $sb_dir 'select @@max_connections' eq 88
! find_errors $sb_dir

# sandbox cleanup
exec dbdeployer delete msb_{{.DbPathVer}}
stdout 'sandboxes/msb_{{.DbPathVer}}'
! stderr .
! exists $sb_dir
